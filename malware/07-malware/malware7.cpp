#include <windows.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <tlhelp32.h>
 #include "helpers.h"
 
 #pragma comment(linker, "/entry:WinMain")
 
 
 typedef LPVOID (WINAPI * VirtualAllocEx_t)(
   HANDLE hProcess,
   LPVOID lpAddress,
   SIZE_T dwSize,
   DWORD  flAllocationType,
   DWORD  flProtect
 );
 typedef BOOL (WINAPI * WriteProcessMemory_t)(
   HANDLE  hProcess,
   LPVOID  lpBaseAddress,
   LPCVOID lpBuffer,
   SIZE_T  nSize,
   SIZE_T  *lpNumberOfBytesWritten
 );
 typedef HANDLE (WINAPI * CreateRemoteThread_t)(
   HANDLE                 hProcess,
   LPSECURITY_ATTRIBUTES  lpThreadAttributes,
   SIZE_T                 dwStackSize,
   LPTHREAD_START_ROUTINE lpStartAddress,
   LPVOID                 lpParameter,
   DWORD                  dwCreationFlags,
   LPDWORD                lpThreadId
 );
 
 typedef LPVOID (WINAPI * VirtualAlloc_t)(
   LPVOID lpAddress,
   SIZE_T dwSize,
   DWORD  flAllocationType,
   DWORD  flProtect
 );
 
 typedef BOOL (WINAPI * CreateProcessA_t)(
   LPCSTR                lpApplicationName,
   LPSTR                 lpCommandLine,
   LPSECURITY_ATTRIBUTES lpProcessAttributes,
   LPSECURITY_ATTRIBUTES lpThreadAttributes,
   BOOL                  bInheritHandles,
   DWORD                 dwCreationFlags,
   LPVOID                lpEnvironment,
   LPCSTR                lpCurrentDirectory,
   LPSTARTUPINFOA        lpStartupInfo,
   LPPROCESS_INFORMATION lpProcessInformation
 );
 
 typedef DWORD (WINAPI * WaitForSingleObject_t)(
   HANDLE hHandle,
   DWORD  dwMilliseconds
 );
 
 typedef BOOL (WINAPI * CloseHandle_t)(
   HANDLE hObject
 );
 
 int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, 
     LPSTR lpCmdLine, int nCmdShow) {
 
     STARTUPINFO si;
     PROCESS_INFORMATION pi;
 
     ZeroMemory( &si, sizeof(si) );
     si.cb = sizeof(si);
     ZeroMemory( &pi, sizeof(pi) );
 	
 
 	CreateProcessA_t pCreateProcessA = (CreateProcessA_t) hlpGetProcAddress(hlpGetModuleHandle(L"KERNEL32.DLL"), "CreateProcessA");
 	WaitForSingleObject_t pWaitForSingleObject = (WaitForSingleObject_t) hlpGetProcAddress(hlpGetModuleHandle(L"KERNEL32.DLL"), "WaitForSingleObject");
 	CloseHandle_t pCloseHandle = (CloseHandle_t) hlpGetProcAddress(hlpGetModuleHandle(L"KERNEL32.DLL"), "CloseHandle");
 
 	if (!pCreateProcessA( NULL,  
 LOCATION
					NULL,           
 					NULL,           
 					FALSE,          
 					0,              
 					NULL,           
 					NULL,           
 					&si,            
 					&pi )           
 		    ) {
         return -1;
 	}
 	pWaitForSingleObject( pi.hProcess, INFINITE );
     
 	
     pCloseHandle( pi.hProcess );
     pCloseHandle( pi.hThread );
 
 	return 0;
 }
 
